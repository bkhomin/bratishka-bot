import logging
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from typing import List, Optional, Dict, Any

import aiosmtplib

from app.config import Config

logger = logging.getLogger(__name__)


class EmailService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        self.smtp_config = {
            'hostname': Config.EMAIL_HOST,
            'port': Config.EMAIL_PORT,
            'username': Config.EMAIL_USER,
            'password': Config.EMAIL_PASSWORD,
            'use_tls': True,
            'start_tls': True if Config.EMAIL_PORT in [587, 25] else False
        }
        self._validate_config()

    def _validate_config(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ email"""
        required_fields = ['hostname', 'username', 'password']
        missing_fields = [field for field in required_fields
                          if not getattr(Config, f'EMAIL_{field.upper()}', None)]

        if missing_fields:
            logger.warning(f"Email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_fields}")

    @property
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return bool(Config.EMAIL_HOST and Config.EMAIL_USER and Config.EMAIL_PASSWORD)

    async def send_email(
            self,
            to_emails: List[str],
            subject: str,
            body: str,
            html_body: Optional[str] = None,
            attachments: Optional[List[Dict[str, Any]]] = None
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ email

        Args:
            to_emails: –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            body: –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
            html_body: HTML –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            attachments: –°–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{'data': bytes, 'filename': str, 'content_type': str}]

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.is_configured:
            return {
                'status': 'error',
                'message': 'Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é EMAIL_* –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö'
            }

        if not to_emails:
            return {
                'status': 'error',
                'message': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏'
            }

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = MIMEMultipart('alternative')
            msg['From'] = Config.EMAIL_USER
            msg['To'] = ', '.join(to_emails)
            msg['Subject'] = subject

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏
            text_part = MIMEText(body, 'plain', 'utf-8')
            msg.attach(text_part)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ HTML —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if html_body:
                html_part = MIMEText(html_body, 'html', 'utf-8')
                msg.attach(html_part)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
            if attachments:
                for attachment in attachments:
                    await self._add_attachment(msg, attachment)

            # –û—Ç–ø—Ä–∞–≤–∫–∞
            await self._send_message(msg, to_emails)

            logger.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞ {len(to_emails)} –∞–¥—Ä–µ—Å–æ–≤")
            return {
                'status': 'success',
                'message': f'Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {len(to_emails)} –∞–¥—Ä–µ—Å–æ–≤',
                'recipients': to_emails
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}'
            }

    async def send_protocol_email(
            self,
            to_emails: List[str],
            chat_title: str,
            protocol_text: str,
            participants: List[str],
            time_period: str
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤—Å—Ç—Ä–µ—á–∏"""
        subject = f"–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏: {chat_title}"

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        body = f"""–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ –≤ —á–∞—Ç–µ "{chat_title}"
–ü–µ—Ä–∏–æ–¥: {time_period}
–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(participants)}

{protocol_text}

---
–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º Bratishka"""

        # HTML –≤–µ—Ä—Å–∏—è
        html_body = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; margin: 20px; }}
                .header {{ background: #f4f4f4; padding: 15px; border-radius: 5px; margin-bottom: 20px; }}
                .content {{ background: white; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }}
                .participants {{ margin: 10px 0; padding: 10px; background: #f9f9f9; border-radius: 3px; }}
                .footer {{ margin-top: 20px; font-size: 12px; color: #666; }}
                pre {{ white-space: pre-wrap; word-wrap: break-word; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h2>üìã –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏: {chat_title}</h2>
                <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> {time_period}</p>
            </div>

            <div class="participants">
                <strong>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:</strong> {', '.join(participants)}
            </div>

            <div class="content">
                <pre>{protocol_text}</pre>
            </div>

            <div class="footer">
                <p>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º Bratishka</p>
            </div>
        </body>
        </html>
        """

        return await self.send_email(to_emails, subject, body, html_body)

    async def send_meeting_invite(
            self,
            to_emails: List[str],
            meeting_title: str,
            meeting_date: str,
            meeting_time: str,
            duration: str,
            description: str,
            ics_content: Optional[str] = None
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É"""
        subject = f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É: {meeting_title}"

        body = f"""–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:

üìÖ –î–∞—Ç–∞: {meeting_date}
‚è∞ –í—Ä–µ–º—è: {meeting_time}
‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}
üìã –¢–µ–º–∞: {meeting_title}

–û–ø–∏—Å–∞–Ω–∏–µ:
{description}

---
–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º Bratishka"""

        html_body = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; margin: 20px; }}
                .invite {{ background: #e8f4fd; padding: 20px; border-radius: 10px; border-left: 5px solid #2196F3; }}
                .details {{ margin: 15px 0; }}
                .detail-item {{ margin: 8px 0; padding: 8px; background: white; border-radius: 5px; }}
                .description {{ margin-top: 15px; padding: 15px; background: #f9f9f9; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <div class="invite">
                <h2>üìÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É</h2>

                <div class="details">
                    <div class="detail-item"><strong>üìã –¢–µ–º–∞:</strong> {meeting_title}</div>
                    <div class="detail-item"><strong>üìÖ –î–∞—Ç–∞:</strong> {meeting_date}</div>
                    <div class="detail-item"><strong>‚è∞ –í—Ä–µ–º—è:</strong> {meeting_time}</div>
                    <div class="detail-item"><strong>‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> {duration}</div>
                </div>

                <div class="description">
                    <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong><br>
                    {description.replace(chr(10), '<br>')}
                </div>
            </div>

            <p style="margin-top: 20px; font-size: 12px; color: #666;">
                –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º Bratishka
            </p>
        </body>
        </html>
        """

        attachments = []
        if ics_content:
            attachments.append({
                'data': ics_content.encode('utf-8'),
                'filename': 'meeting.ics',
                'content_type': 'text/calendar'
            })

        return await self.send_email(to_emails, subject, body, html_body, attachments)

    async def _add_attachment(self, msg: MIMEMultipart, attachment: Dict[str, Any]) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        try:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(attachment['data'])
            encoders.encode_base64(part)

            part.add_header(
                'Content-Disposition',
                f'attachment; filename= {attachment["filename"]}'
            )

            if 'content_type' in attachment:
                part.set_type(attachment['content_type'])

            msg.attach(part)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è {attachment.get('filename', 'unknown')}: {e}")

    async def _send_message(self, msg: MIMEMultipart, to_emails: List[str]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ SMTP"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            smtp = aiosmtplib.SMTP(**self.smtp_config)

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            await smtp.connect()

            if self.smtp_config['start_tls']:
                await smtp.starttls()

            await smtp.login(self.smtp_config['username'], self.smtp_config['password'])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await smtp.send_message(msg, recipients=to_emails)

            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await smtp.quit()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ SMTP –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            raise

    async def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.is_configured:
            return {
                'status': 'error',
                'message': 'Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            }

        try:
            smtp = aiosmtplib.SMTP(**self.smtp_config)
            await smtp.connect()

            if self.smtp_config['start_tls']:
                await smtp.starttls()

            await smtp.login(self.smtp_config['username'], self.smtp_config['password'])
            await smtp.quit()

            return {
                'status': 'success',
                'message': 'SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'
            }

        except Exception as e:
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}'
            }
    