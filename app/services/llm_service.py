"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
"""
import asyncio
import os
import threading
import time
from datetime import datetime
from pathlib import Path
from typing import List, Tuple, Dict, Optional

from app.config.settings import config
from app.config.logging import get_logger

logger = get_logger(__name__)


class LLMService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é"""

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ LLM - –ù–ï –ë–õ–û–ö–ò–†–£–Æ–©–ê–Ø
        """
        self.config = config.llm
        self.llm: Optional[object] = None
        self.is_initialized = False
        self.is_loading = False
        self.initialization_error = None
        self.loading_thread = None

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–∑—É
        self._create_startup_indicator()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self._start_background_loading()

    def _create_startup_indicator(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"""
        try:
            os.makedirs('/tmp', exist_ok=True)
            with open('/tmp/service_started', 'w') as f:
                f.write(f'Service started at {datetime.now().isoformat()}')
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞: {e}")

    def _start_background_loading(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
        logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏...")
        self.is_loading = True
        self.loading_thread = threading.Thread(target=self._load_model_background, daemon=True)
        self.loading_thread.start()

    def _load_model_background(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
            if not self._check_model_exists():
                self.initialization_error = f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config.model_path}"
                logger.error(self.initialization_error)
                self.is_loading = False
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å (–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É)
            self._check_memory_requirements()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            self._initialize_model_safe()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ LLM: {e}")
            self.initialization_error = str(e)
        finally:
            self.is_loading = False

    def _check_model_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏"""
        model_path = Path(self.config.model_path)
        exists = model_path.exists()

        if not exists:
            logger.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config.model_path}")
            logger.error(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
            try:
                models_dir = Path('models')
                if models_dir.exists():
                    files = list(models_dir.glob('*'))
                    logger.error(f"–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ models/: {files}")
                else:
                    logger.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è models/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ models/: {e}")

        return exists

    def _check_memory_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏"""
        try:
            model_path = Path(self.config.model_path)
            file_size_gb = model_path.stat().st_size / (1024**3)
            logger.info(f"–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {file_size_gb:.2f} GB")

            try:
                import psutil
                memory = psutil.virtual_memory()
                available_gb = memory.available / (1024**3)
                logger.info(f"–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {available_gb:.2f} GB")

                required_gb = file_size_gb * 1.2
                if available_gb < required_gb:
                    logger.warning(f"–ú–∞–ª–æ –ø–∞–º—è—Ç–∏: –Ω—É–∂–Ω–æ ~{required_gb:.2f} GB, –¥–æ—Å—Ç—É–ø–Ω–æ {available_gb:.2f} GB")
                    logger.info("–ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")

            except ImportError:
                logger.warning("psutil –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞–º—è—Ç–∏")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞–º—è—Ç–∏: {e}")

    def _initialize_model_safe(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º llama_cpp —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            from llama_cpp import Llama

            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏: {self.config.model_path}")
            logger.info(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: n_ctx={self.config.n_ctx}, n_threads={self.config.n_threads}")

            start_time = time.time()

            # –ö–†–ò–¢–ò–ß–ù–û: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            self.llm = Llama(
                model_path=self.config.model_path,
                n_ctx=config.llm.n_ctx,  # –ñ–µ—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                n_threads=config.llm.n_threads,  # –ú–∏–Ω–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤
                n_gpu_layers=config.llm.n_gpu_layers,  # –ë–µ–∑ GPU
                verbose=False,
                seed=-1,
                use_mlock=False,  # –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Docker
                use_mmap=True,
                n_batch=256,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π batch
                low_vram=False,
                logits_all=False,
                vocab_only=False,
                embedding=False
            )

            load_time = time.time() - start_time
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f} —Å–µ–∫—É–Ω–¥")

            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
            logger.info("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")
            test_start = time.time()
            test_result = self.llm("Test", max_tokens=3, temperature=0.1)
            test_time = time.time() - test_start
            logger.info(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω –∑–∞ {test_time:.2f} —Å–µ–∫—É–Ω–¥")

            self.is_initialized = True

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            try:
                with open('/tmp/model_loaded', 'w') as f:
                    f.write(f'Model loaded at {datetime.now().isoformat()}')
                logger.info("üìù –°–æ–∑–¥–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ llama_cpp: {e}")
            self.initialization_error = f"llama_cpp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.initialization_error = str(e)
            self.is_initialized = False

    def get_status(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
        if self.is_initialized:
            return "üü¢ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞"
        elif self.is_loading:
            return "üü° –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏..."
        elif self.initialization_error:
            return f"üî¥ –û—à–∏–±–∫–∞: {self.initialization_error}"
        else:
            return "‚ö™ –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

    def prepare_messages_context(self, messages_with_metadata: List[Tuple[str, Dict]]) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM"""
        messages = []

        for doc, metadata in messages_with_metadata:
            timestamp_value = metadata['timestamp']

            if isinstance(timestamp_value, (int, float)):
                timestamp = datetime.fromtimestamp(timestamp_value)
            elif isinstance(timestamp_value, str):
                try:
                    timestamp = datetime.fromtimestamp(float(timestamp_value))
                except ValueError:
                    timestamp = datetime.fromisoformat(timestamp_value)
            else:
                timestamp = datetime.now()

            username = metadata.get('username', 'Unknown')
            full_name = metadata.get('full_name', username)
            display_name = full_name if full_name != "Unknown" else username

            messages.append(
                f"[{timestamp.strftime('%H:%M')}] {display_name}: {doc}"
            )

        return "\n".join(messages[-50:])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Å–æ–æ–±—â–µ–Ω–∏–π

    def generate_summary_prompt(
            self,
            messages_context: str,
            time_desc: str,
            message_count: int
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏

        Args:
            messages_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            time_desc: –û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            message_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π

        Returns:
            –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        if message_count < 10:
            detail_level = "–ª–∞–∫–æ–Ω–∏—á–Ω—É—é"
        elif message_count < 50:
            detail_level = "–∫—Ä–∞—Ç–∫—É—é"
        elif message_count < 200:
            detail_level = "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é"
        else:
            detail_level = "–¥–µ—Ç–∞–ª—å–Ω—É—é"

        prompt = f"""<|im_start|>system
–¢—ã - —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ Telegram —á–∞—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å {detail_level} —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–ø–∏—Å–∫–∏.
<|im_end|>
<|im_start|>user
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–µ—Ä–µ–ø–∏—Å–∫—É {time_desc} –∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–¥–∫—É.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤–æ–¥–∫–∏:
1. –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ç–µ–º—ã
3. –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏
2. –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –±—ã–ª–∏)
4. –°—É—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–ª–∏ —Å–ø–æ—Ä–æ–≤ (–µ—Å–ª–∏ –±—ã–ª–∏)
5. –ù–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ–¥–∫–µ
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ç–æ, —á–µ–≥–æ –Ω–µ –±—ã–ª–æ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown –∏ HTML, —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
- –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ —Å–≤–æ–¥–∫–∏ –Ω–µ—á–µ–≥–æ –ø–∏—Å–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏) - –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –≤ —Å–≤–æ–¥–∫–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
- –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω, –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–ª–æ - —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏, –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —á–∞—Ç–∞:
{messages_context}
<|im_end|>
<|im_start|>assistant"""

        return prompt

    async def generate_summary(self, messages_context: str, time_desc: str, message_count: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —Å –ø–æ–º–æ—â—å—é LLM"""

        if self.is_loading:
            return f"‚è≥ –ú–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."

        if not self.is_initialized or not self.llm:
            error_msg = f"‚ùå LLM –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            if self.initialization_error:
                error_msg += f": {self.initialization_error}"
            return error_msg

        try:
            prompt = self.generate_summary_prompt(messages_context, time_desc, message_count)

            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            logger.debug(f"–ü—Ä–æ–º–ø—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {prompt[:500]}...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            start_time = time.time()

            response = await loop.run_in_executor(
                None,
                lambda: self.llm(
                    prompt,
                    max_tokens=self.config.max_tokens,
                    temperature=self.config.temperature,
                    top_p=self.config.top_p,
                    stop=["<|im_end|>", "<|im_start|>"]
                )
            )

            elapsed_time = time.time() - start_time
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")

            summary = response['choices'][0]['text'].strip()

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –º–∞–ª–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
            if len(summary) < 50 and message_count > 5:
                summary = f"‚ö†Ô∏è –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –±—ã–ª–∞ –º–∞–ª–æ–∞–∫—Ç–∏–≤–Ω–æ–π.\n\n{summary}"

            logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞: {summary}")
            return summary

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"

    def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        return True  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞

