import logging
from datetime import datetime
from typing import List, Dict, Any

from sqlalchemy.ext.asyncio import AsyncSession

from app.core.cache import context_cache, make_cache_key
from app.core.llm_pool import OptimizedLLM
from app.core.utils import format_conversation
from app.services.message_service import MessageService

logger = logging.getLogger(__name__)


class SummaryService:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–æ–∫"""

    def __init__(self):
        self.llm = OptimizedLLM()
        self.message_service = MessageService()

    async def create_chat_summary(
            self,
            db: AsyncSession,
            chat_id: str,
            hours_back: int = 24,
            include_reasoning: bool = False,
            use_cache: bool = False
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = make_cache_key("summary", chat_id, hours_back, include_reasoning)

            if use_cache:
                cached_result = await context_cache.get(cache_key)
                if cached_result:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    return cached_result

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.message_service.get_chat_messages(db, chat_id, hours_back)

            if not messages:
                return {
                    'status': 'empty',
                    'message': f'–í —á–∞—Ç–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤'
                }

            if len(messages) < 3:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                return {
                    'status': 'insufficient',
                    'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏'
                }

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            conversation_text = format_conversation(messages)

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            summary_prompt = self._create_optimized_prompt(conversation_text, hours_back)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏
            if include_reasoning:
                result = await self.llm.reasoning_generate(summary_prompt)
                summary_text = result["answer"]
                reasoning = result["thinking"]
            else:
                summary_text = await self.llm.generate(summary_prompt, max_tokens=512)
                reasoning = None

            # –ü–æ–¥—Å—á–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            unique_users = set()
            for msg in messages:
                if not msg['is_bot_message'] and msg['username'] != 'Unknown':
                    unique_users.add(msg['username'])

            result = {
                'status': 'success',
                'summary': summary_text,
                'reasoning': reasoning,
                'participants_count': len(unique_users),
                'messages_count': len(messages),
                'time_period': f'{hours_back} —á–∞—Å–æ–≤',
                'participants': list(unique_users)
            }

            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if use_cache and result['status'] == 'success':
                await context_cache.set(cache_key, result, ttl=1800)  # 30 –º–∏–Ω—É—Ç

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}'
            }

    def _create_optimized_prompt(self, conversation: str, hours_back: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        current_time = datetime.now().strftime("%H:%M %d.%m.%Y")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        max_chars = 4000
        if len(conversation) > max_chars:
            conversation = "...\n" + conversation[-max_chars:]

        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –∑–∞ {hours_back} —á–∞—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É.

–í—Ä–µ–º—è: {current_time}

–ü–ï–†–ï–ü–ò–°–ö–ê:
{conversation}

–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É:
1. üìã –û–°–ù–û–í–ù–´–ï –¢–ï–ú–´
2. ‚úÖ –†–ï–®–ï–ù–ò–Ø –ò –î–û–ì–û–í–û–†–ï–ù–ù–û–°–¢–ò  
3. ‚è∞ –°–†–û–ö–ò –ò –ó–ê–î–ê–ß–ò
4. üë• –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–´–ï

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""

        return prompt

    async def extract_action_items(self, summary_text: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ action items –∏–∑ —Å–≤–æ–¥–∫–∏"""
        try:
            action_prompt = f"""–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–æ–¥–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è:

{summary_text}

–í–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
- –ó–ê–î–ê–ß–ê: –æ–ø–∏—Å–∞–Ω–∏–µ
- –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–´–ô: –∏–º—è
- –°–†–û–ö: –¥–∞—Ç–∞

–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, —É–∫–∞–∂–∏ "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"."""

            result = await self.llm.generate(action_prompt, max_tokens=256)

            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            actions = []
            lines = result.split('\n')
            current_action = {}

            for line in lines:
                line = line.strip()
                if line.startswith('- –ó–ê–î–ê–ß–ê:'):
                    if current_action:
                        actions.append(current_action)
                    current_action = {'task': line.replace('- –ó–ê–î–ê–ß–ê:', '').strip()}
                elif line.startswith('- –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–´–ô:'):
                    current_action['assignee'] = line.replace('- –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–´–ô:', '').strip()
                elif line.startswith('- –°–†–û–ö:'):
                    current_action['deadline'] = line.replace('- –°–†–û–ö:', '').strip()

            if current_action:
                actions.append(current_action)

            return actions

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è action items: {e}")
            return []
