from typing import Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete
from app.database.models import User, RegistrationSession, UserRole
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)


class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    async def create_user(self, db: AsyncSession, user_data: Dict[str, Any]) -> User:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = User(**user_data)
        db.add(user)
        await db.commit()
        await db.refresh(user)
        return user

    async def get_user_by_telegram_id(self, db: AsyncSession, telegram_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        result = await db.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        return result.scalar_one_or_none()

    async def update_user(self, db: AsyncSession, user_id: str, updates: Dict[str, Any]) -> Optional[User]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await db.execute(
            update(User).where(User.id == user_id).values(**updates)
        )
        await db.commit()
        return await self.get_user_by_id(db, user_id)

    async def get_user_by_id(self, db: AsyncSession, user_id: str) -> Optional[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        result = await db.execute(
            select(User).where(User.id == user_id)
        )
        return result.scalar_one_or_none()


class RegistrationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    REGISTRATION_STEPS = [
        'first_name', 'last_name', 'telegram_username',
        'phone', 'email', 'domain_login', 'confirm'
    ]

    STEP_PROMPTS = {
        'first_name': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è:',
        'last_name': '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:',
        'telegram_username': '–í–≤–µ–¥–∏—Ç–µ username –≤ Telegram (–±–µ–∑ @):',
        'phone': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
        'email': '–í–≤–µ–¥–∏—Ç–µ email:',
        'domain_login': '–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω:',
        'confirm': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ'
    }

    async def start_registration(self, db: AsyncSession, telegram_id: int, chat_id: int) -> RegistrationSession:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏
        await db.execute(
            delete(RegistrationSession).where(RegistrationSession.telegram_id == telegram_id)
        )

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = RegistrationSession(
            telegram_id=telegram_id,
            chat_id=chat_id,
            current_step='first_name',
            session_data={},
            expires_at=datetime.utcnow() + timedelta(minutes=30)
        )

        db.add(session)
        await db.commit()
        await db.refresh(session)

        return session

    async def get_registration_session(self, db: AsyncSession, telegram_id: int) -> Optional[RegistrationSession]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        result = await db.execute(
            select(RegistrationSession).where(
                RegistrationSession.telegram_id == telegram_id,
                RegistrationSession.expires_at > datetime.utcnow()
            )
        )
        return result.scalar_one_or_none()

    async def process_registration_step(self, db: AsyncSession, telegram_id: int, user_input: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        session = await self.get_registration_session(db, telegram_id)

        if not session:
            return {'status': 'error', 'message': '–°–µ—Å—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞'}

        current_step = session.current_step

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        validation_result = self._validate_input(current_step, user_input)
        if not validation_result['valid']:
            return {
                'status': 'error',
                'message': validation_result['message'],
                'prompt': self.STEP_PROMPTS[current_step]
            }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        session.session_data[current_step] = user_input

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        current_index = self.REGISTRATION_STEPS.index(current_step)
        if current_index < len(self.REGISTRATION_STEPS) - 1:
            next_step = self.REGISTRATION_STEPS[current_index + 1]
            session.current_step = next_step
            await db.commit()

            if next_step == 'confirm':
                return {
                    'status': 'confirm',
                    'message': self._format_confirmation_message(session.session_data),
                    'data': session.session_data
                }
            else:
                return {
                    'status': 'continue',
                    'message': self.STEP_PROMPTS[next_step],
                    'step': next_step
                }
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            return await self._complete_registration(db, session)

    async def confirm_registration(self, db: AsyncSession, telegram_id: int) -> Dict[str, Any]:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        session = await self.get_registration_session(db, telegram_id)

        if not session:
            return {'status': 'error', 'message': '–°–µ—Å—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}

        return await self._complete_registration(db, session)

    async def _complete_registration(self, db: AsyncSession, session: RegistrationSession) -> Dict[str, Any]:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                'telegram_id': session.telegram_id,
                'first_name': session.session_data.get('first_name'),
                'last_name': session.session_data.get('last_name'),
                'telegram_username': session.session_data.get('telegram_username'),
                'phone': session.session_data.get('phone'),
                'email': session.session_data.get('email'),
                'domain_login': session.session_data.get('domain_login'),
                'role': UserRole.USER,
                'is_registered': True,
                'ldap_verified': False
            }

            user = User(**user_data)
            db.add(user)

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await db.delete(session)

            await db.commit()

            return {
                'status': 'success',
                'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
                'user': user
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await db.rollback()
            return {'status': 'error', 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}

    def _validate_input(self, step: str, user_input: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        user_input = user_input.strip()

        if not user_input:
            return {'valid': False, 'message': '–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}

        if step == 'email':
            if '@' not in user_input or '.' not in user_input:
                return {'valid': False, 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'}

        elif step == 'phone':
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if len(user_input.replace('+', '').replace('-', '').replace(' ', '')) < 10:
                return {'valid': False, 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}

        elif step in ['first_name', 'last_name']:
            if len(user_input) < 2:
                return {'valid': False, 'message': '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'}

        return {'valid': True}

    def _format_confirmation_message(self, data: Dict[str, str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        return f"""–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

üë§ –ò–º—è: {data.get('first_name')}
üë§ –§–∞–º–∏–ª–∏—è: {data.get('last_name')}
üì± Telegram: @{data.get('telegram_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üìß Email: {data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üíª –î–æ–º–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω: {data.get('domain_login', '–Ω–µ —É–∫–∞–∑–∞–Ω')}

–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–¥–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã."""
