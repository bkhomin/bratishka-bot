import hashlib
import re
from typing import List, Dict, Any


def hash_content(content: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ SHA256 —Ö–µ—à–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    return hashlib.sha256(content.encode('utf-8')).hexdigest()


def extract_time_period(message_text: str) -> int:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_lower = message_text.lower()

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏
    if '—á–∞—Å' in message_lower:
        match = re.search(r'(\d+)\s*—á–∞—Å', message_lower)
        if match:
            return int(match.group(1))
        else:
            return 1  # "–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"

    elif any(word in message_lower for word in ['–¥–µ–Ω—å', '—Å—É—Ç–∫–∏']):
        return 24

    elif '–Ω–µ–¥–µ–ª—è' in message_lower:
        return 168  # 7 * 24

    else:
        return 24  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é


def is_bot_mentioned(message_text: str, bot_names: List[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    message_lower = message_text.lower()
    return any(name.lower() in message_lower for name in bot_names)


def format_conversation(messages: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    conversation_lines = []

    for msg in messages:
        timestamp = msg['created_at'].strftime("%H:%M")
        username = msg.get('username', 'Unknown')
        content = msg['content']

        if msg.get('is_bot_message'):
            username = "ü§ñ Bratishka"

        conversation_lines.append(f"[{timestamp}] {username}: {content}")

    return "\n".join(conversation_lines)


def chunk_messages(messages: List[Any], max_chunk_size: int = 100) -> List[List[Any]]:
    """–†–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    chunks = []
    for i in range(0, len(messages), max_chunk_size):
        chunks.append(messages[i:i + max_chunk_size])
    return chunks


def validate_email(email: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))


def validate_phone(phone: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    cleaned = re.sub(r'[^\d+]', '', phone)
    return len(cleaned) >= 10


def safe_int(value: Any, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
    try:
        return int(value)
    except (ValueError, TypeError):
        return default
