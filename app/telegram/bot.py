import asyncio
import logging
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.connection import async_session, db_manager
from app.services.auth_service import AuthService
from app.services.user_service import UserService, RegistrationService
from app.services.chat_service import ChatService
from app.services.message_service import MessageService
from app.services.summary_service import SummaryService
from app.services.email_service import EmailService
from app.services.calendar_service import CalendarService
from app.services.ldap_service import LDAPService
from app.core.llm_pool import llm_pool, OptimizedLLM
from app.core.utils import extract_time_period, is_bot_mentioned
from app.config import Config
from datetime import datetime
import sys

logger = logging.getLogger(__name__)


class BratishkaBot:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram –±–æ—Ç Bratishka"""

    def __init__(self):
        self.app = None
        self.bot = None
        self._request_semaphore = asyncio.Semaphore(Config.MAX_CONCURRENT_REQUESTS)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        if Config.is_ldap_enabled():
            self.ldap_service = LDAPService()
            self.auth_service = AuthService(self.ldap_service)
        else:
            self.ldap_service = None
            self.auth_service = AuthService(None)

        self.user_service = UserService()
        self.registration_service = RegistrationService()
        self.chat_service = ChatService()
        self.message_service = MessageService()
        self.summary_service = SummaryService()

        # Email –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–µ—Ä–≤–∏—Å—ã
        self.email_service = EmailService()
        self.calendar_service = CalendarService(self.email_service)

        # LLM
        self.llm = OptimizedLLM()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bratishka Bot...")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_errors = Config.validate()
        if config_errors:
            for error in config_errors:
                logger.error(error)
            raise ValueError("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db_manager.init_pool()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –ø—É–ª–∞
        await llm_pool.initialize()

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        self.bot = self.app.bot

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        await self._register_handlers()

        logger.info("Bratishka Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.handle_start_command))
        self.app.add_handler(CommandHandler("help", self.handle_help_command))
        self.app.add_handler(CommandHandler("register", self.handle_register_command))
        self.app.add_handler(CommandHandler("status", self.handle_status_command))
        self.app.add_handler(CommandHandler("test_email", self.handle_test_email_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.ALL, self.handle_message))

    async def handle_start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            f"ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø {Config.BOT_NAME} - –≤–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
            "üíº –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –≤—Å—Ç—Ä–µ—á\n"
            "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π\n"
            "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "üîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n\n"
            f"–î–ª—è —Ä–∞–±–æ—Ç—ã —É–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è: @{Config.TELEGRAM_BOT_USERNAME}"
        )

    async def handle_help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"""ü§ñ {Config.BOT_NAME} - –ö–æ–º–∞–Ω–¥—ã

üìã –ü–†–û–¢–û–ö–û–õ–´:
‚Ä¢ @{Config.BOT_NAME} –ø–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥
‚Ä¢ @{Config.BOT_NAME} —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–∏ –∑–∞ —á–∞—Å?
‚Ä¢ @{Config.BOT_NAME} –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

üìÖ –í–°–¢–†–ï–ß–ò:
‚Ä¢ @{Config.BOT_NAME} –Ω–∞–∑–Ω–∞—á—å –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00
‚Ä¢ @{Config.BOT_NAME} –ø—Ä–æ–¥–æ–ª–∂–∏–º –≥–æ–ª–æ—Å–æ–º –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫

üìß –û–¢–ü–†–ê–í–ö–ê:
‚Ä¢ @{Config.BOT_NAME} –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å–µ–º
‚Ä¢ @{Config.BOT_NAME} —Ä–∞–∑–æ—à–ª–∏ –∏—Ç–æ–≥–∏

‚öôÔ∏è –ö–û–ú–ê–ù–î–´:
‚Ä¢ /start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /test_email - —Ç–µ—Å—Ç email (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""

        await update.message.reply_text(help_text)

    async def handle_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        async with async_session() as db:
            is_admin = await self.auth_service.is_admin(db, update.effective_user.id)

            if not is_admin:
                await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            email_status = "‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" if self.email_service.is_configured else "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            ldap_status = "‚úÖ –≤–∫–ª—é—á–µ–Ω" if Config.is_ldap_enabled() else "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω"

            status_text = f"""üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã {Config.BOT_NAME}

ü§ñ LLM: ‚úÖ –∞–∫—Ç–∏–≤–µ–Ω ({llm_pool.pool_size} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤)
üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
üìä –ö–µ—à: ‚úÖ –∞–∫—Ç–∏–≤–µ–Ω
‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {Config.MAX_CONCURRENT_REQUESTS} –∑–∞–ø—Ä–æ—Å–æ–≤
üìß Email: {email_status}
üì° LDAP: {ldap_status}

üìà –ú–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(llm_pool._pool._queue) if hasattr(llm_pool._pool, '_queue') else 'N/A'}
‚Ä¢ –ú–∞–∫—Å. –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {Config.MAX_CONCURRENT_REQUESTS}"""

            await update.message.reply_text(status_text)

    async def handle_test_email_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        async with async_session() as db:
            is_admin = await self.auth_service.is_admin(db, update.effective_user.id)

            if not is_admin:
                await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                return

            if not self.email_service.is_configured:
                await update.message.reply_text("‚ùå Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ EMAIL_* –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return

            await update.message.reply_text("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é email —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")

            # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            test_result = await self.email_service.test_connection()

            if test_result['status'] == 'success':
                await update.message.reply_text("‚úÖ Email —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ email: {test_result['message']}")

    async def handle_register_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
        telegram_id = update.effective_user.id

        async with async_session() as db:
            is_admin = await self.auth_service.is_admin(db, telegram_id)
            if not is_admin:
                await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
                return

            chat_id = update.effective_chat.id
            session = await self.registration_service.start_registration(db, telegram_id, chat_id)

            await update.message.reply_text(
                "üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                f"{self.registration_service.STEP_PROMPTS['first_name']}"
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏"""
        async with self._request_semaphore:
            await self._process_message(update, context)

    async def _process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            telegram_id = update.effective_user.id
            message_text = update.message.text or ""
            chat_id = update.effective_chat.id

            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {telegram_id}: '{message_text[:50]}...'")

            async with async_session() as db:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                registration_session = await self.registration_service.get_registration_session(db, telegram_id)
                if registration_session:
                    await self._handle_registration_process(update, db, telegram_id, message_text)
                    return

                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                user, auth_message = await self.auth_service.check_access(db, telegram_id)
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}: {'–Ω–∞–π–¥–µ–Ω' if user else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")

                # –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
                chat_data = {
                    'type': update.effective_chat.type,
                    'title': getattr(update.effective_chat, 'title', None),
                    'description': getattr(update.effective_chat, 'description', None)
                }
                logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–∞—Ç: {chat_data}")

                chat = await self.chat_service.get_or_create_chat(db, chat_id, chat_data)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                if user:
                    await self.chat_service.add_participant(db, chat.id, user.id)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_data = {
                    'telegram_message_id': update.message.message_id,
                    'chat_id': chat.id,
                    'user_id': user.id if user else None,
                    'content': message_text,
                    'message_type': 'text',
                    'is_bot_message': False,
                    'user_registered': user is not None
                }
                await self.message_service.save_message(db, message_data)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É
                if self._is_bot_mentioned(message_text):
                    if user is None:
                        await update.message.reply_text(auth_message)
                        return

                    await self._process_bot_command(update, db, user, chat, message_text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    async def _handle_registration_process(self, update: Update, db: AsyncSession, telegram_id: int, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if message_text.lower() in ['–¥–∞', 'yes', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é']:
            result = await self.registration_service.confirm_registration(db, telegram_id)
        else:
            result = await self.registration_service.process_registration_step(db, telegram_id, message_text)

        status_emoji = {
            'error': '‚ùå',
            'continue': 'üìù',
            'confirm': '‚úÖ',
            'success': 'üéâ'
        }

        emoji = status_emoji.get(result['status'], 'üìù')
        await update.message.reply_text(f"{emoji} {result['message']}")

    def _is_bot_mentioned(self, message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞"""
        bot_names = [
            f"@{Config.BOT_NAME}",
            f"@{Config.TELEGRAM_BOT_USERNAME}",
            Config.BOT_NAME.lower()
        ]
        return is_bot_mentioned(message_text, bot_names)

    async def _process_bot_command(self, update: Update, db: AsyncSession, user, chat, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É"""
        message_lower = message_text.lower()

        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
        recent_count = await self.message_service.get_recent_messages_count(db, chat.id, 1)
        if recent_count < 2:
            await update.message.reply_text("ü§î –í —á–∞—Ç–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        if any(keyword in message_lower for keyword in
               ['–ø–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥', '–ø—Ä–æ—Ç–æ–∫–æ–ª', '–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', '–æ–±—Å—É–∂–¥–∞–ª–∏', '–∏—Ç–æ–≥–∏']):
            await self._handle_summary_request(update, db, chat, message_text)

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á
        elif any(keyword in message_lower for keyword in
                 ['–≤—Å—Ç—Ä–µ—á–∞', '–≤—Å—Ç—Ä–µ—á—É', '—Å–æ–±—Ä–∞–Ω–∏–µ', '—Å–æ–∑–≤–æ–Ω', '–Ω–∞–∑–Ω–∞—á—å', '–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π']):
            await self._handle_meeting_request(update, db, chat, user, message_text)

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        elif any(keyword in message_lower for keyword in ['–æ—Ç–ø—Ä–∞–≤—å', '—Ä–∞–∑–æ—à–ª–∏']) and any(
                keyword in message_lower for keyword in ['–ø—Ä–æ—Ç–æ–∫–æ–ª', '–∏—Ç–æ–≥–∏', '—Å–≤–æ–¥–∫—É']):
            await self._handle_send_protocol_request(update, db, chat, message_text)

        # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        else:
            await self._handle_general_question(update, message_text)

    async def _handle_summary_request(self, update: Update, db: AsyncSession, chat, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏"""
        hours_back = extract_time_period(message_text)

        await update.message.reply_text("üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É...")

        summary_result = await self.summary_service.create_chat_summary(
            db, chat.id, hours_back, include_reasoning=False
        )

        if summary_result['status'] == 'success':
            summary_text = f"üìã **–ü–†–û–¢–û–ö–û–õ** –∑–∞ {summary_result['time_period']}\n\n"
            summary_text += summary_result['summary']
            summary_text += f"\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {summary_result['participants_count']}"
            summary_text += f" | üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {summary_result['messages_count']}"

            await update.message.reply_text(summary_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå {summary_result['message']}")

    async def _handle_meeting_request(self, update: Update, db: AsyncSession, chat, user, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏"""
        await update.message.reply_text("üìÖ –ü–ª–∞–Ω–∏—Ä—É—é –≤—Å—Ç—Ä–µ—á—É...")

        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            meeting_info_result = await self.calendar_service.extract_meeting_info_from_text(
                message_text, self.llm
            )

            if meeting_info_result['status'] != 'success':
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Å—Ç—Ä–µ—á–∏")
                return

            meeting_info = meeting_info_result['meeting_info']

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            messages = await self.message_service.get_chat_messages(db, chat.id, 24)
            participants_emails = []

            # –°–æ–±–∏—Ä–∞–µ–º email —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            participant_usernames = set()
            for msg in messages[-20:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                if not msg['is_bot_message'] and msg['username'] != 'Unknown':
                    participant_usernames.add(msg['username'])

            # –ü–æ–ª—É—á–∞–µ–º email –∞–¥—Ä–µ—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã
            if participant_usernames:
                participants = await self.message_service.get_chat_participants_from_messages(db, chat.id, 24)
                participants_emails = [p.email for p in participants if p.email]

            if not participants_emails:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏
                response_text = f"""‚úÖ **–í–°–¢–†–ï–ß–ê –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ê**

üìã –¢–µ–º–∞: {meeting_info['title']}
üìÖ –î–∞—Ç–∞: {meeting_info['date']}
‚è∞ –í—Ä–µ–º—è: {meeting_info['time']}
‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {meeting_info['duration_minutes']} –º–∏–Ω

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {meeting_info['description']}

‚ö†Ô∏è Email –∞–¥—Ä–µ—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∫–∞–∑–∞–Ω—ã email –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö."""

                await update.message.reply_text(response_text, parse_mode='Markdown')
                return

            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
            create_result = await self.calendar_service.create_meeting(
                title=meeting_info['title'],
                date_str=meeting_info['date'],
                time_str=meeting_info['time'],
                duration_minutes=meeting_info['duration_minutes'],
                description=meeting_info['description'],
                attendees=participants_emails,
                organizer_email=user.email
            )

            if create_result['status'] == 'success':
                response_text = f"""‚úÖ **–í–°–¢–†–ï–ß–ê –°–û–ó–î–ê–ù–ê –ò –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø –û–¢–ü–†–ê–í–õ–ï–ù–´**

üìã –¢–µ–º–∞: {meeting_info['title']}
üìÖ –î–∞—Ç–∞: {meeting_info['date']}
‚è∞ –í—Ä–µ–º—è: {meeting_info['time']}
‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {meeting_info['duration_minutes']} –º–∏–Ω
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω—ã: {len(participants_emails)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üìß –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞:
{', '.join(participants_emails)}"""

                await update.message.reply_text(response_text, parse_mode='Markdown')
            else:
                await update.message.reply_text(f"‚ùå {create_result['message']}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏")

    async def _handle_send_protocol_request(self, update: Update, db: AsyncSession, chat, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        hours_back = extract_time_period(message_text)

        await update.message.reply_text("üìß –°–æ–∑–¥–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ—Ç–æ–∫–æ–ª...")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏
        summary_result = await self.summary_service.create_chat_summary(db, chat.id, hours_back)

        if summary_result['status'] != 'success':
            await update.message.reply_text(f"‚ùå {summary_result['message']}")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å email
        participants = await self.message_service.get_chat_participants_from_messages(db, chat.id, hours_back)
        participants_with_email = [p for p in participants if p.email]

        if not participants_with_email:
            await update.message.reply_text("‚ùå –£ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω—ã email –∞–¥—Ä–µ—Å–∞")
            return

        if not self.email_service.is_configured:
            await update.message.reply_text("‚ùå Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ email
        try:
            emails_list = [p.email for p in participants_with_email]
            participants_names = [f"@{p.telegram_username}" if p.telegram_username else f"{p.first_name} {p.last_name}"
                                  for p in participants_with_email]

            email_result = await self.email_service.send_protocol_email(
                to_emails=emails_list,
                chat_title=chat.title or f"–ß–∞—Ç {chat.telegram_chat_id}",
                protocol_text=summary_result['summary'],
                participants=participants_names,
                time_period=summary_result['time_period']
            )

            if email_result['status'] == 'success':
                await update.message.reply_text(
                    f"‚úÖ **–ü–†–û–¢–û–ö–û–õ –û–¢–ü–†–ê–í–õ–ï–ù**\n\n"
                    f"üìß –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ ({len(emails_list)}):\n{', '.join(emails_list)}\n\n"
                    f"üìã –ü–µ—Ä–∏–æ–¥: {summary_result['time_period']}\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {summary_result['messages_count']}"
                )
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {email_result['message']}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")

    async def _handle_general_question(self, update: Update, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        try:
            system_prompt = f"""–¢—ã - –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ {Config.BOT_NAME}. 
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
–°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

            full_prompt = f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å: {message_text}"

            response = await self.llm.generate(full_prompt, max_tokens=256)
            await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Bratishka Bot...")
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()

        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            await self.stop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Bratishka Bot...")

        if self.app:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ updater –∑–∞–ø—É—â–µ–Ω –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
                if self.app.updater.running:
                    await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
            except RuntimeError as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ updater
                if "not running" not in str(e).lower():
                    raise

        await llm_pool.shutdown()
        await db_manager.close_pool()

        logger.info("Bratishka Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
