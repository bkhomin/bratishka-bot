"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""
from datetime import datetime, timedelta

from app.config.logging import get_logger
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.core.intent_recognizer import IntentRecognizer, Intent
from app.services.chroma_service import ChromaService
from app.services.llm_service import LLMService

logger = get_logger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Telegram
TELEGRAM_MAX_MESSAGE_LENGTH = 4096
TELEGRAM_SAFE_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


class TelegramHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞"""

    def __init__(
            self,
            chroma_service: ChromaService,
            llm_service: LLMService,
            bot_username: str,
            default_time_hours: int = 2
    ):
        self.chroma_service = chroma_service
        self.llm_service = llm_service  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
        self.bot_username = bot_username.replace('@', '')
        self.default_time_hours = default_time_hours
        self.intent_recognizer = IntentRecognizer()

    def _truncate_text(self, text: str, max_length: int = TELEGRAM_SAFE_LENGTH) -> str:
        """
        –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        """
        if len(text) <= max_length:
            return text

        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        sentences = text.split('.')
        result = ""

        for sentence in sentences:
            test_result = result + sentence + "."
            if len(test_result) > max_length - 50:
                break
            result = test_result

        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
        if len(result) < max_length // 2:
            words = text.split()
            result = ""
            for word in words:
                test_result = result + " " + word if result else word
                if len(test_result) > max_length - 20:
                    break
                result = test_result

        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω
        if len(result) < len(text):
            result = result.rstrip() + "..."

        return result

    def _split_long_message(self, text: str, max_length: int = TELEGRAM_SAFE_LENGTH) -> list[str]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        """
        if len(text) <= max_length:
            return [text]

        parts = []
        current_part = ""

        paragraphs = text.split('\n\n')

        for paragraph in paragraphs:
            if len(paragraph) > max_length:
                sentences = paragraph.split('.')
                for sentence in sentences:
                    if not sentence.strip():
                        continue

                    sentence = sentence.strip() + '.'

                    if len(current_part + '\n' + sentence) > max_length:
                        if current_part:
                            parts.append(current_part.strip())
                            current_part = sentence
                        else:
                            parts.append(self._truncate_text(sentence, max_length))
                    else:
                        current_part += '\n' + sentence if current_part else sentence
            else:
                if len(current_part + '\n\n' + paragraph) > max_length:
                    if current_part:
                        parts.append(current_part.strip())
                        current_part = paragraph
                    else:
                        parts.append(paragraph)
                else:
                    current_part += '\n\n' + paragraph if current_part else paragraph

        if current_part:
            parts.append(current_part.strip())

        return parts

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if self.llm_service:
            model_status = self.llm_service.get_status()
        else:
            model_status = "üî¥ –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        message_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø @{self.bot_username} - –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏.\n\n"
            f"–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: {model_status}\n\n"
            "üîπ –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —á–∞—Ç –∏ —è –Ω–∞—á–Ω—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "üîπ –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ —á–µ—Ä–µ–∑ @:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ @{self.bot_username} –æ —á—ë–º –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å?\n"
            f"‚Ä¢ @{self.bot_username} —Å–≤–æ–¥–∫—É\n\n"
            f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {self.default_time_hours} —á–∞—Å–∞."
        )

        await update.message.reply_text(self._truncate_text(message_text))

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê:\n\n"
            "‚Ä¢ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞\n\n"
            "–ö–ê–ö –ó–ê–ü–†–û–°–ò–¢–¨ –°–í–û–î–ö–£:\n"
            f"–£–ø–æ–º—è–Ω–∏—Ç–µ @{self.bot_username} –∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ:\n\n"
            "üìã –ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í:\n"
            f"‚Ä¢ @{self.bot_username} —Å–≤–æ–¥–∫–∞\n"
            f"‚Ä¢ @{self.bot_username} –æ —á—ë–º –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å?\n"
            f"‚Ä¢ @{self.bot_username} —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–∏ –∑–∞ —á–∞—Å?\n\n"
            "‚è∞ –í–†–ï–ú–ï–ù–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´:\n"
            "‚Ä¢ \"—Å–µ–π—á–∞—Å\" - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ \"–∑–∞ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π\"\n"
            "‚Ä¢ \"–≤—á–µ—Ä–∞\" - –≤–µ—Å—å –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n"
            "‚Ä¢ \"–≤—Å—ë –≤—Ä–µ–º—è\" - –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è"
        )

        await update.message.reply_text(self._truncate_text(help_text))

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            chat_id = update.message.chat_id
            stats = self.chroma_service.get_collection_stats(chat_id)

            if self.llm_service:
                model_status = self.llm_service.get_status()
            else:
                model_status = "üî¥ –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            chroma_status = "üü¢ —Ä–∞–±–æ—Ç–∞–µ—Ç" if self.chroma_service.health_check() else "üî¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            stats_text = (
                f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–¢–ê:\n\n"
                f"üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
                f"üÜî ID —á–∞—Ç–∞: {chat_id}\n"
                f"ü§ñ –ë–æ—Ç: @{self.bot_username}\n\n"
                f"–°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í:\n"
                f"üß† LLM –º–æ–¥–µ–ª—å: {model_status}\n"
                f"üóÑÔ∏è ChromaDB: {chroma_status}"
            )

            await update.message.reply_text(self._truncate_text(stats_text))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ stats: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.message
        if not message or not message.text:
            return

        try:
            intent = self.intent_recognizer.recognize_intent(
                message.text,
                self.bot_username
            )

            if intent and intent.type == 'summary':
                await self._handle_summary_request(message, intent)
            else:
                await self._save_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

    async def _save_message(self, message):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ChromaDB"""
        try:
            success = self.chroma_service.save_message(message)
            if success:
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _handle_summary_request(self, message, intent: Intent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–∫–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ LLM —Å–µ—Ä–≤–∏—Å–∞
        if not self.llm_service:
            await message.reply_text(
                "‚ùå LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
        if self.llm_service.is_loading:
            await message.reply_text(
                "‚è≥ –ú–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.\n"
                f"–°—Ç–∞—Ç—É—Å: {self.llm_service.get_status()}"
            )
            return

        if not self.llm_service.is_initialized:
            await message.reply_text(
                f"‚ùå LLM –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                f"–°—Ç–∞—Ç—É—Å: {self.llm_service.get_status()}"
            )
            return

        chat_id = message.chat_id
        time_intent = intent.time_intent

        time_desc = self.intent_recognizer.get_time_description(
            time_intent,
            self.default_time_hours
        )

        status_message = await message.reply_text(
            f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è {time_desc}..."
        )

        try:
            start_time, end_time = self._calculate_time_range(time_intent, chat_id)

            messages_with_metadata = self.chroma_service.get_messages_by_time(
                chat_id,
                int(start_time.timestamp()),
                int(end_time.timestamp())
            )

            if not messages_with_metadata:
                await status_message.edit_text(
                    f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π {time_desc}"
                )
                return

            messages_context = self.llm_service.prepare_messages_context(
                messages_with_metadata
            )

            summary = await self.llm_service.generate_summary(
                messages_context,
                time_desc,
                len(messages_with_metadata)
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = (
                f"üìã –°–í–û–î–ö–ê {time_desc.upper()}\n"
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages_with_metadata)}\n\n"
            )

            full_message = header + summary

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(full_message) <= TELEGRAM_SAFE_LENGTH:
                await status_message.edit_text(full_message)
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                await status_message.edit_text(header.strip())

                summary_parts = self._split_long_message(summary)

                for i, part in enumerate(summary_parts):
                    if i == 0:
                        part_header = "üìÑ –ß–∞—Å—Ç—å 1:\n\n"
                    else:
                        part_header = f"üìÑ –ß–∞—Å—Ç—å {i+1}:\n\n"

                    part_message = part_header + part

                    if len(part_message) > TELEGRAM_SAFE_LENGTH:
                        part_message = part_header + self._truncate_text(part, TELEGRAM_SAFE_LENGTH - len(part_header))

                    await message.reply_text(part_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}", exc_info=True)
            error_message = (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

            try:
                await status_message.edit_text(error_message)
            except Exception:
                await message.reply_text(error_message)

    def _calculate_time_range(self, time_intent, chat_id: int) -> tuple[datetime, datetime]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
        now = datetime.now()

        if time_intent.is_yesterday:
            yesterday = now - timedelta(days=1)
            start = datetime.combine(yesterday.date(), datetime.min.time())
            end = datetime.combine(yesterday.date(), datetime.max.time())
        elif time_intent.is_all_time:
            start = datetime.fromtimestamp(0)
            end = now
        elif time_intent.period:
            start = now - time_intent.period
            end = now
        else:
            start = now - timedelta(hours=self.default_time_hours)
            end = now

        return start, end
