"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""
from datetime import datetime, timedelta

from app.config.logging import get_logger
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.core.intent_recognizer import IntentRecognizer, Intent
from app.services.chroma_service import ChromaService
from app.services.llm_service import LLMService

logger = get_logger(__name__)


class TelegramHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞"""

    def __init__(
            self,
            chroma_service: ChromaService,
            llm_service: LLMService,
            bot_username: str,
            default_time_hours: int = 2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

        Args:
            chroma_service: –°–µ—Ä–≤–∏—Å ChromaDB
            llm_service: –°–µ—Ä–≤–∏—Å LLM
            bot_username: –ò–º—è –±–æ—Ç–∞
            default_time_hours: –ß–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        self.chroma_service = chroma_service
        self.llm_service = llm_service
        self.bot_username = bot_username.replace('@', '')
        self.default_time_hours = default_time_hours
        self.intent_recognizer = IntentRecognizer()

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø @{self.bot_username} - –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏.\n\n"
            "üîπ –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —á–∞—Ç –∏ —è –Ω–∞—á–Ω—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "üîπ –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ —á–µ—Ä–µ–∑ @:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ @{self.bot_username} –æ —á—ë–º –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å?\n"
            f"‚Ä¢ @{self.bot_username} —Å–≤–æ–¥–∫—É\n"
            f"‚Ä¢ @{self.bot_username} —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ —Å–µ–π—á–∞—Å?\n"
            f"‚Ä¢ @{self.bot_username} —Å–≤–æ–¥–∫–∞ –∑–∞ 30 –º–∏–Ω—É—Ç\n"
            f"‚Ä¢ @{self.bot_username} –æ —á—ë–º –≤—á–µ—Ä–∞ –≥–æ–≤–æ—Ä–∏–ª–∏?\n\n"
            f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {self.default_time_hours} —á–∞—Å–∞."
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
            "‚Ä¢ `/start` - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞\n\n"
            "*–ö–∞–∫ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–≤–æ–¥–∫—É:*\n"
            f"–£–ø–æ–º—è–Ω–∏—Ç–µ @{self.bot_username} –∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ:\n\n"
            "üìã *–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
            f"‚Ä¢ @{self.bot_username} —Å–≤–æ–¥–∫–∞\n"
            f"‚Ä¢ @{self.bot_username} –æ —á—ë–º –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å?\n"
            f"‚Ä¢ @{self.bot_username} —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–∏ –∑–∞ —á–∞—Å?\n"
            f"‚Ä¢ @{self.bot_username} —Å–≤–æ–¥–∫–∞ –∑–∞ –≤—á–µ—Ä–∞\n\n"
            "‚è∞ *–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:*\n"
            "‚Ä¢ \"—Å–µ–π—á–∞—Å\" - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ \"–∑–∞ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π\"\n"
            "‚Ä¢ \"–≤—á–µ—Ä–∞\" - –≤–µ—Å—å –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n"
            "‚Ä¢ \"–≤—Å—ë –≤—Ä–µ–º—è\" - –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è\n",
            parse_mode=ParseMode.MARKDOWN
        )

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        chat_id = update.message.chat_id
        stats = self.chroma_service.get_collection_stats(chat_id)

        await update.message.reply_text(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:*\n\n"
            f"üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
            f"üÜî ID —á–∞—Ç–∞: `{chat_id}`\n"
            f"ü§ñ –ë–æ—Ç: @{self.bot_username}",
            parse_mode=ParseMode.MARKDOWN
        )

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        message = update.message
        if not message or not message.text:
            return

        try:
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            intent = self.intent_recognizer.recognize_intent(
                message.text,
                self.bot_username
            )

            if intent and intent.type == 'summary':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–æ–¥–∫—É
                await self._handle_summary_request(message, intent)
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._save_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

    async def _save_message(self, message):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ChromaDB

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ Telegram
        """
        try:
            success = self.chroma_service.save_message(message)
            if success:
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _handle_summary_request(self, message, intent: Intent):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–∫–∏

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ Telegram
            intent: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        """
        chat_id = message.chat_id
        time_intent = intent.time_intent

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        time_desc = self.intent_recognizer.get_time_description(
            time_intent,
            self.default_time_hours
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status_message = await message.reply_text(
            f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è {time_desc}..."
        )

        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            start_time, end_time = self._calculate_time_range(time_intent, chat_id)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ ChromaDB
            messages_with_metadata = self.chroma_service.get_messages_by_time(
                chat_id,
                int(start_time.timestamp()),
                int(end_time.timestamp())
            )

            if not messages_with_metadata:
                await status_message.edit_text(
                    f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π {time_desc}"
                )
                return

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
            messages_context = self.llm_service.prepare_messages_context(
                messages_with_metadata
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary = await self.llm_service.generate_summary(
                messages_context,
                time_desc,
                len(messages_with_metadata)
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await status_message.edit_text(
                f"üìã *–°–≤–æ–¥–∫–∞ {time_desc}*\n"
                f"_–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages_with_metadata)}_\n\n"
                f"{summary}",
                parse_mode=ParseMode.MARKDOWN
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}", exc_info=True)
            await status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    def _calculate_time_range(self, time_intent, chat_id: int) -> tuple[datetime, datetime]:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

        Args:
            time_intent: –í—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            chat_id: ID —á–∞—Ç–∞

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü) –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        """
        now = datetime.now()

        if time_intent.is_yesterday:
            # –í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —Å 00:00 –¥–æ 23:59
            yesterday = now - timedelta(days=1)
            start = datetime.combine(yesterday.date(), datetime.min.time())
            end = datetime.combine(yesterday.date(), datetime.max.time())
        elif time_intent.is_all_time:
            # –í—Å—ë –≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ —ç–ø–æ—Ö–∏
            start = datetime.fromtimestamp(0)
            end = now
        elif time_intent.period:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            start = now - time_intent.period
            end = now
        else:
            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            start = now - timedelta(hours=self.default_time_hours)
            end = now

        return start, end
