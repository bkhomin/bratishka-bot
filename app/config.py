import os
from urllib.parse import quote_plus

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
env_path = os.path.join(project_root, '.env')

if os.path.exists(env_path):
    load_dotenv(env_path)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_path}")
else:
    print(f"‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")
    print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")


class Config:
    # LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    LLAMA_MODEL_PATH = os.getenv("LLAMA_MODEL_PATH")
    LLAMA_N_CTX = int(os.getenv("LLAMA_N_CTX", 8192))
    LLAMA_N_THREADS = int(os.getenv("LLAMA_N_THREADS", 8))
    LLAMA_TEMPERATURE = float(os.getenv("LLAMA_TEMPERATURE", 0.6))
    LLAMA_TOP_P = float(os.getenv("LLAMA_TOP_P", 0.95))

    # Database components
    DATABASE_HOST = os.getenv("DATABASE_HOST", "localhost")
    DATABASE_PORT = int(os.getenv("DATABASE_PORT", 5432))
    DATABASE_NAME = os.getenv("DATABASE_NAME")
    DATABASE_USER = os.getenv("DATABASE_USER")
    DATABASE_USER_PASSWORD = os.getenv("DATABASE_USER_PASSWORD")

    DATABASE_POOL_SIZE = int(os.getenv("DATABASE_POOL_SIZE", 20))
    DATABASE_MAX_OVERFLOW = int(os.getenv("DATABASE_MAX_OVERFLOW", 30))

    # Telegram
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    TELEGRAM_BOT_USERNAME = os.getenv("TELEGRAM_BOT_USERNAME", "bratishka")

    # LDAP (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    LDAP_SERVER = os.getenv("LDAP_SERVER")
    LDAP_BASE_DN = os.getenv("LDAP_BASE_DN")
    LDAP_BIND_DN = os.getenv("LDAP_BIND_DN")
    LDAP_BIND_PASSWORD = os.getenv("LDAP_BIND_PASSWORD")
    LDAP_USER_SEARCH_BASE = os.getenv("LDAP_USER_SEARCH_BASE")
    LDAP_USER_SEARCH_FILTER = os.getenv("LDAP_USER_SEARCH_FILTER", "(telegramId={telegram_id})")

    # Email
    EMAIL_HOST = os.getenv("EMAIL_HOST")
    EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
    EMAIL_USER = os.getenv("EMAIL_USER")
    EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")

    # Performance
    MAX_CONCURRENT_REQUESTS = int(os.getenv("MAX_CONCURRENT_REQUESTS", 10))
    MESSAGE_CACHE_SIZE = int(os.getenv("MESSAGE_CACHE_SIZE", 1000))
    CONTEXT_CACHE_TTL = int(os.getenv("CONTEXT_CACHE_TTL", 3600))

    # Agent settings
    DEFAULT_SUMMARY_HOURS = int(os.getenv("DEFAULT_SUMMARY_HOURS", 24))
    REGISTRATION_SESSION_TIMEOUT = int(os.getenv("REGISTRATION_SESSION_TIMEOUT", 30))
    BOT_NAME = os.getenv("BOT_NAME", "bratishka")

    @classmethod
    def get_database_url(self) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç DATABASE_URL –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if not all([self.DATABASE_USER, self.DATABASE_USER_PASSWORD, self.DATABASE_HOST, self.DATABASE_NAME]):
            return ""

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–∞—Ä–æ–ª–µ
        password = quote_plus(self.DATABASE_USER_PASSWORD)
        user = quote_plus(self.DATABASE_USER)

        return f"postgresql://{user}:{password}@{self.DATABASE_HOST}:{self.DATABASE_PORT}/{self.DATABASE_NAME}"

    @classmethod
    def validate(cls) -> list[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        errors = []

        config_instance = cls()

        if not config_instance.LLAMA_MODEL_PATH:
            errors.append("LLAMA_MODEL_PATH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã DATABASE_URL
        if not config_instance.DATABASE_NAME:
            errors.append("DATABASE_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not config_instance.DATABASE_USER:
            errors.append("DATABASE_USER –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not config_instance.DATABASE_USER_PASSWORD:
            errors.append("DATABASE_USER_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not config_instance.DATABASE_HOST:
            errors.append("DATABASE_HOST –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        if not config_instance.TELEGRAM_BOT_TOKEN:
            errors.append("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        return errors

    @classmethod
    def is_ldap_enabled(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω –ª–∏ LDAP (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ property –æ—à–∏–±–∫–∞)"""
        return bool(cls.LDAP_SERVER)

    @classmethod
    def print_debug_info(cls):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n" + "=" * 50)
        print("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø BRATISHKA")
        print("=" * 50)

        print(f"üìÇ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")
        print(f"üìÑ .env —Ñ–∞–π–ª: {env_path}")
        print(f"üìÑ .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(env_path)}")

        print("\nüìä –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"DATABASE_URL: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if cls.DATABASE_URL else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"TELEGRAM_BOT_TOKEN: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if cls.TELEGRAM_BOT_TOKEN else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"LLAMA_MODEL_PATH: {cls.LLAMA_MODEL_PATH or '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

        if cls.LLAMA_MODEL_PATH:
            print(f"–ú–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if os.path.exists(cls.LLAMA_MODEL_PATH) else '‚ùå'}")

        print(f"\nüìß EMAIL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"EMAIL_HOST: {cls.EMAIL_HOST or '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"EMAIL_USER: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if cls.EMAIL_USER else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

        print(f"\nüîó LDAP: {'‚úÖ –≤–∫–ª—é—á–µ–Ω' if cls.is_ldap_enabled() else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω'}")

        print("=" * 50)


# –ü–µ—á–∞—Ç–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if __name__ == "__main__" or os.getenv("DEBUG_CONFIG"):
    Config.print_debug_info()
